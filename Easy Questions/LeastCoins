import unittest

def leastCoins(toonies, loonies, quarters, dimes, nickels):
    '''
    Assume that toonies, loonies, quarters, dimes and,
    nickles are all integer values representing the number
    of coins that a user has.
    Given this input, return an array of format
    [toonies, loonies, quarters, dimes, nickels]
    which has the same total value as the original input, but with
    the least amount of coins
    for example leastCoins(2,1,5,0,2) would return
    [3,0,1,1,0]
    As our original input was equal to $6.35, and the way to represent
    that value with the least coins is with 3 toonies, one quarter and 
    one dime.
    Hints: 
    
    1. you may need to use the round(number, numberOfDigits) function
    to deal with floating point precision issues.
    EX: round(10.4999,2) -> 10.50
    2. Remember your modulus (%) and floor division (//) operators
    '''
    sum = 0
    sum +=toonies*2
    sum +=loonies*1
    sum +=quarters*0.25
    sum +=dimes*0.10
    sum +=nickels*0.05

    sum = round(sum,2)
    toonies = sum//2
    sum -= toonies*2

    sum = round(sum,2)
    loonies = sum//1
    sum -= loonies*1

    sum = round(sum,2)
    quarters =  sum//0.25
    sum -= quarters*0.25

    sum = round(sum,2)
    dimes = sum//0.10
    sum -= dimes*0.10

    sum = round(sum,2)
    nickels =sum//0.05
    sum -= nickels*0.05

    list1=[toonies, loonies, quarters, dimes, nickels]

    return(list1)

    


class leastCoinsTests(unittest.TestCase):
    def test1(self):
        self.assertEqual(leastCoins(2,1,5,0,2), [3,0,1,1,0])
    def test2(self):
        self.assertEqual(leastCoins(0,1,4,0,10), [1,0,2,0,0])
    def test2(self):
        self.assertEqual(leastCoins(0,1,4,0,10), [1,0,2,0,0])


if __name__ == '__main__':

    unittest.main(exit=True)
